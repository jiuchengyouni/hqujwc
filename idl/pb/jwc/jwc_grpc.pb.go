// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: jwc.proto

package jwc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JwcService_GetGsSession_FullMethodName = "/JwcService/GetGsSession"
)

// JwcServiceClient is the client API for JwcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JwcServiceClient interface {
	GetGsSession(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*GsSessionResponse, error)
}

type jwcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJwcServiceClient(cc grpc.ClientConnInterface) JwcServiceClient {
	return &jwcServiceClient{cc}
}

func (c *jwcServiceClient) GetGsSession(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*GsSessionResponse, error) {
	out := new(GsSessionResponse)
	err := c.cc.Invoke(ctx, JwcService_GetGsSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwcServiceServer is the server API for JwcService service.
// All implementations must embed UnimplementedJwcServiceServer
// for forward compatibility
type JwcServiceServer interface {
	GetGsSession(context.Context, *LoginRequest) (*GsSessionResponse, error)
	mustEmbedUnimplementedJwcServiceServer()
}

// UnimplementedJwcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJwcServiceServer struct {
}

func (UnimplementedJwcServiceServer) GetGsSession(context.Context, *LoginRequest) (*GsSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGsSession not implemented")
}
func (UnimplementedJwcServiceServer) mustEmbedUnimplementedJwcServiceServer() {}

// UnsafeJwcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwcServiceServer will
// result in compilation errors.
type UnsafeJwcServiceServer interface {
	mustEmbedUnimplementedJwcServiceServer()
}

func RegisterJwcServiceServer(s grpc.ServiceRegistrar, srv JwcServiceServer) {
	s.RegisterService(&JwcService_ServiceDesc, srv)
}

func _JwcService_GetGsSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwcServiceServer).GetGsSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwcService_GetGsSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwcServiceServer).GetGsSession(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JwcService_ServiceDesc is the grpc.ServiceDesc for JwcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JwcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JwcService",
	HandlerType: (*JwcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGsSession",
			Handler:    _JwcService_GetGsSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jwc.proto",
}
