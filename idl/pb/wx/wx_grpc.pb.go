// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: idl/wx.proto

package wx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WxService_WeChatCallBack_FullMethodName = "/WxService/WeChatCallBack"
)

// WxServiceClient is the client API for WxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WxServiceClient interface {
	WeChatCallBack(ctx context.Context, in *WxAccessRequest, opts ...grpc.CallOption) (*WxAccessResponse, error)
}

type wxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWxServiceClient(cc grpc.ClientConnInterface) WxServiceClient {
	return &wxServiceClient{cc}
}

func (c *wxServiceClient) WeChatCallBack(ctx context.Context, in *WxAccessRequest, opts ...grpc.CallOption) (*WxAccessResponse, error) {
	out := new(WxAccessResponse)
	err := c.cc.Invoke(ctx, WxService_WeChatCallBack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WxServiceServer is the server API for WxService service.
// All implementations must embed UnimplementedWxServiceServer
// for forward compatibility
type WxServiceServer interface {
	WeChatCallBack(context.Context, *WxAccessRequest) (*WxAccessResponse, error)
	mustEmbedUnimplementedWxServiceServer()
}

// UnimplementedWxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWxServiceServer struct {
}

func (UnimplementedWxServiceServer) WeChatCallBack(context.Context, *WxAccessRequest) (*WxAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatCallBack not implemented")
}
func (UnimplementedWxServiceServer) mustEmbedUnimplementedWxServiceServer() {}

// UnsafeWxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WxServiceServer will
// result in compilation errors.
type UnsafeWxServiceServer interface {
	mustEmbedUnimplementedWxServiceServer()
}

func RegisterWxServiceServer(s grpc.ServiceRegistrar, srv WxServiceServer) {
	s.RegisterService(&WxService_ServiceDesc, srv)
}

func _WxService_WeChatCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxServiceServer).WeChatCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxService_WeChatCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxServiceServer).WeChatCallBack(ctx, req.(*WxAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WxService_ServiceDesc is the grpc.ServiceDesc for WxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WxService",
	HandlerType: (*WxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WeChatCallBack",
			Handler:    _WxService_WeChatCallBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/wx.proto",
}
